{"version":3,"sources":["redux/actions/index.js","redux/actions/tasks.js","redux/actions/input.js","components/ToDo.js","App.js","serviceWorker.js","redux/reducers/tasks.js","redux/reducers/input.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["allActions","taskActions","add","payload","type","update","remove","inputActions","setTask","clear","editSelected","Todo","tasks","useSelector","state","input","dispatch","useDispatch","rowClass","task","selected","id","status","className","onSubmit","e","preventDefault","edit","prop","value","width","placeholder","onChange","target","disabled","length","scope","map","key","checked","desc","onClick","App","Boolean","window","location","hostname","match","initialState","uuidv4","taskReducer","action","newTask","temp","find","item","filter","inputReducer","rootReducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c0bc0d7.chunk.js","sourcesContent":["import taskActions from \"./tasks\";\r\nimport inputActions from \"./input\";\r\n\r\nconst allActions = {\r\n  taskActions,\r\n  inputActions,\r\n};\r\n\r\nexport default allActions;\r\n","const add = (payload) => {\r\n  return {\r\n    type: \"ADD\",\r\n    payload,\r\n  };\r\n};\r\n\r\nconst update = (payload) => {\r\n  return {\r\n    type: \"UPDATE\",\r\n    payload,\r\n  };\r\n};\r\n\r\nconst remove = (payload) => {\r\n  return {\r\n    type: \"REMOVE\",\r\n    payload,\r\n  };\r\n};\r\n\r\nexport default {\r\n  add,\r\n  update,\r\n  remove,\r\n};\r\n","const setTask = (payload) => {\r\n  return {\r\n    type: \"CHANGE_TASK\",\r\n    payload,\r\n  };\r\n};\r\n\r\nconst clear = () => {\r\n  return {\r\n    type: \"CLEAR\",\r\n  };\r\n};\r\n\r\nconst editSelected = (payload) => {\r\n  return {\r\n    type: \"EDIT_TASK\",\r\n    payload,\r\n  };\r\n};\r\n\r\nexport default {\r\n  setTask,\r\n  clear,\r\n  editSelected,\r\n};\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport allActions from \"../redux/actions\";\r\n\r\nconst Todo = () => {\r\n  const tasks = useSelector((state) => state.tasks);\r\n  const input = useSelector((state) => state.input);\r\n  const dispatch = useDispatch();\r\n\r\n  const submit = (e) => {\r\n    e.preventDefault();\r\n    if (input.edit) {\r\n      dispatch(\r\n        allActions.taskActions.update({\r\n          id: input.selected.id,\r\n          prop: \"desc\",\r\n          value: input.task,\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(allActions.taskActions.add(input.task));\r\n    }\r\n    dispatch(allActions.inputActions.clear());\r\n  };\r\n\r\n  const rowClass = (task) => {\r\n    return input.selected && task.id === input.selected.id\r\n      ? \"table-info\"\r\n      : task.status\r\n      ? \"table-success\"\r\n      : \"table-secondary\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"head container\">\r\n        <h3 className=\"header\">To Do App</h3>\r\n        <h6 className=\"sub\">by Jericho Aldemo</h6>\r\n        {/* INPUT START */}\r\n        <div>\r\n          <form className=\"input-container\" onSubmit={submit}>\r\n            <input\r\n              width=\"485px\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter a task for today\"\r\n              onChange={(e) =>\r\n                dispatch(allActions.inputActions.setTask(e.target.value))\r\n              }\r\n              value={input.task}\r\n            />\r\n            <button\r\n              disabled={input.task.length === 0}\r\n              className=\"btn btn-primary\"\r\n              type=\"submit\"\r\n            >\r\n              {input.edit ? \"Update\" : \"Add Task\"}\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      {/* INPUT END */}\r\n      <div className=\"container\">\r\n        {/* TODO LIST START */}\r\n        <table className=\"table table-hover\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\"></th>\r\n              <th scope=\"col\" className=\"white\">\r\n                Description\r\n              </th>\r\n              <th scope=\"col\" className=\"center white\">\r\n                Actions\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {tasks.length > 0 &&\r\n              tasks.map((task) => (\r\n                <tr key={task.id} className={rowClass(task)}>\r\n                  <th scope=\"row\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={task.status}\r\n                      onChange={() =>\r\n                        dispatch(\r\n                          allActions.taskActions.update({\r\n                            id: task.id,\r\n                            prop: \"status\",\r\n                            value: !task.status,\r\n                          })\r\n                        )\r\n                      }\r\n                    />\r\n                  </th>\r\n                  <td className={task.status ? \"strike\" : \"basic\"}>\r\n                    {task.desc}\r\n                  </td>\r\n                  <td className=\"center\">\r\n                    <div className=\"btn-grid\">\r\n                      <button\r\n                        onClick={() =>\r\n                          input.edit && input.selected.id === task.id\r\n                            ? dispatch(allActions.inputActions.clear())\r\n                            : dispatch(\r\n                                allActions.inputActions.editSelected(task)\r\n                              )\r\n                        }\r\n                        className=\"btn btn-warning wdth\"\r\n                      >\r\n                        {input.edit && input.selected.id === task.id\r\n                          ? \"Cancel\"\r\n                          : \"Edit\"}\r\n                      </button>\r\n                      <button\r\n                        onClick={() => {\r\n                          dispatch(allActions.taskActions.remove(task.id));\r\n                          dispatch(allActions.inputActions.clear());\r\n                        }}\r\n                        className=\"btn btn-danger wdth\"\r\n                      >\r\n                        Delete\r\n                      </button>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </table>\r\n        {/* TODO LIST END */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\nimport Todo from \"./components/ToDo\";\n\nfunction App() {\n  return (\n    <div>\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst initialState = [\r\n  { id: uuidv4(), desc: \"Go for a jog.\", status: false },\r\n  { id: uuidv4(), desc: \"Go to the market.\", status: false },\r\n  { id: uuidv4(), desc: \"Bathe the dogs.\", status: true },\r\n];\r\n\r\nconst taskReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"ADD\":\r\n      const newTask = {\r\n        id: uuidv4(),\r\n        desc: action.payload,\r\n        status: false,\r\n      };\r\n      return [newTask, ...state];\r\n    case \"UPDATE\":\r\n      const temp = [...state];\r\n      temp.find((item) => item.id === action.payload.id)[action.payload.prop] =\r\n        action.payload.value;\r\n      return temp;\r\n    case \"REMOVE\":\r\n      return [...state].filter((item) => item.id !== action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default taskReducer;\r\n","const initialState = {\r\n  task: \"\",\r\n  selected: null,\r\n  edit: false,\r\n};\r\nconst inputReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE_TASK\":\r\n      return { ...state, task: action.payload };\r\n    case \"CLEAR\":\r\n      return initialState;\r\n    case \"EDIT_TASK\":\r\n      return {\r\n        task: action.payload.desc,\r\n        selected: action.payload,\r\n        edit: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default inputReducer;\r\n","import taskReducer from \"./tasks\";\r\nimport inputReducer from \"./input\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n  tasks: taskReducer,\r\n  input: inputReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}